@using BloodHub.Client.Services
@using BloodHub.Shared.Entities
@using BloodHub.Shared.Extentions

@inject PatientService PatientService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" Model="@Patient" OnValidSubmit="OnValidSubmit" Spacing="3">
            <MudTextField Label="Mã y tế" @bind-Value="Patient.MedicalId" FullWidth="true" Variant="Variant.Outlined"
                          Mask="@(new PatternMask("0000000000"))" @ref="medicalInput" />

            <MudGrid Spacing="1">
                <MudItem xs="12">
                    <!-- Họ và tên -->
                    <MudTextField Label="Họ và tên"
                                  @bind-Value="Patient.PatientName"
                                  Required="true"
                                  Variant="Variant.Outlined"
                                  RequiredError="Bạn chưa nhập tên bệnh nhân"
                                  FullWidth="true"
                                  @onblur="(e) => Patient.PatientName = Patient.PatientName.ToUpper()" />
                </MudItem>

                <MudItem xs="12">
                    <!-- Ngày sinh -->
                    <MudDatePicker Label="Ngày sinh" @bind-Date="selectDOB" DateFormat="dd/MM/yyyy" Variant="Variant.Outlined"
                                   Required="true" RequiredError="Ngày sinh không được để trống" />
                </MudItem>

                <MudItem xs="6">
                    <MudTextField Label="Tuổi" Value="Patient.Age" Variant="Variant.Outlined" ReadOnly="true" />
                </MudItem>

                <MudItem xs="6">
                    <!-- Giới tính -->
                    <MudSelect @bind-Value="Patient.Gender" Label="Giới tính" Required="true" FullWidth="true" Variant="Variant.Outlined">
                        @foreach (var gender in GenderMapping.EnumToStringMap.Values)
                        {
                            <MudSelectItem Value="@GenderMapping.StringToEnumMap[gender]">@gender</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12">
                    <!-- Địa chỉ -->
                    <MudTextField @bind-Value="Patient.Address" Label="Địa chỉ" Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="6">
                    <!-- Nhóm máu -->
                    <MudSelect @bind-Value="Patient.BloodGroup" Label="Nhóm máu" Required="true"
                               Variant="Variant.Outlined">
                        @foreach (var bloodGroup in Enum.GetValues<BloodGroup>())
                        {
                            <MudSelectItem Value="@bloodGroup">
                                @bloodGroup
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="6">
                    <!-- Nhóm máu hệ Rhesus -->
                    <MudSelect @bind-Value="Patient.Rhesus" Label="Nhóm máu hệ Rhesus" Required="true" FullWidth="true" Variant="Variant.Outlined">
                        @foreach (var rhesus in RhesusMapping.EnumToStringMap.Values)
                        {
                            <MudSelectItem Value="@RhesusMapping.StringToEnumMap[rhesus]">@rhesus</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="CloseDialog" Color="Color.Secondary">Hủy</MudButton>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="isLoading" OnClick="SubmitForm">
            @if (isLoading)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Small" />
            }
            else
            {
                <MudText>@(Patient.Id == 0 ? "Thêm mới" : "Cập nhật")</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public Patient Patient { get; set; } = new Patient();

    private string PatientName
    {
        get => Patient.PatientName;
        set => Patient.PatientName = value?.ToUpper() ?? string.Empty;
    }

    private Patient originalPatient = new Patient();
    private MudForm? form;
    private bool isLoading = false;
    private MudTextField<string?>? medicalInput;
    private DateTime? selectDOB
    {
        get => Patient.DateOfBirth == DateTime.MinValue ? DateTime.Now : Patient.DateOfBirth;
        set
        {
            if (value.HasValue)
            {
                Patient.DateOfBirth = value.Value;
            }
        }
    }

    protected override void OnInitialized()
    {
        if (Patient != null)
        {
            originalPatient = new Patient
                {
                    Id = Patient.Id,
                    MedicalId = Patient.MedicalId,
                    PatientName = Patient.PatientName,
                    DateOfBirth = Patient.DateOfBirth,
                    Gender = Patient.Gender,
                    BloodGroup = Patient.BloodGroup,
                    Rhesus = Patient.Rhesus
                };
        }
        else
        {
            Patient = new Patient() { DateOfBirth = DateTime.Now };
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FocusMedicalInput();
        }
    }

    private async Task SubmitForm()
    {
        if (form != null)
        {
            await form.Validate();
            if (form.IsValid)
            {
                await OnValidSubmit();
            }
        }
    }

    private async Task OnValidSubmit()
    {
        isLoading = true;

        try
        {
            var result = Patient.Id == 0
                ? await PatientService.CreatePatient(Patient)
                : await PatientService.UpdatePatient(Patient.Id, Patient);

            if (!result.Success)
            {
                await DialogService.ShowMessageBox("Trùng dữ liệu", result.Message);
                await FocusMedicalInput();
                isLoading = false;
                return;
            }
            else
            {
                Snackbar.Add("Cập nhật thông tin bệnh nhân thành công!", Severity.Success);
            }

            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Lỗi", $"Xảy ra lỗi {ex.Message}.");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CloseDialog()
    {
        if (Patient != null)
        {
            Patient.Id = originalPatient.Id;
            Patient.MedicalId = originalPatient.MedicalId;
            Patient.PatientName = originalPatient.PatientName;
            Patient.DateOfBirth = originalPatient.DateOfBirth;
            Patient.Gender = originalPatient.Gender;
            Patient.BloodGroup = originalPatient.BloodGroup;
            Patient.Rhesus = originalPatient.Rhesus;
        }

        MudDialog.Cancel();
    }

    private async Task FocusMedicalInput()
    {
        await Task.Delay(200);
        if (medicalInput != null)
        {
            await medicalInput.FocusAsync();
        }
    }
}
